step1 :
Add Event Handler  ( the button )
Get Input Values 
Add the new Item to our Data structure
Add the new item to the UI
calculate the new budget 
 update the UI

NB : Before Coding this part of the App we need to structure our Code 
break up our Code into some logical parts which are MODULES 
* Important aspect of any robust application's architecture 
* keep the units of code for a project both cleanly separated and organized
* Encapsulate some data into privacy and expose other data publicly.
 
 Modules <----interact-----> other Modules


 UI MODULE  -----------------------------  DATA MODULE
 
Get Input Values                         Add the new Item to our Data structure
Add the new item to the UI               calculate the new budget 
update the UI


Controller MODULE 

Add Event Handler  ( the button )



1st lecture : 
- how to use the module pattern 
- learn more about private and public data , encapsulation and separtation of concerns

Data encapsulation allows us to hide the details of a specific module from the outside scope
so that we only expose a public interface which is sometimes called an API . 

Separtation of Concerns means that each module of the app should be interesed in doing one thing independtly

we need the AppController in order to connect the modules so that they can communicate with each other
and exchange data 

barebones architecture of the app 

2nd lecture : 
- how to set up EventListeners for keypress EventListener
- how to use event object 

3rd lecture :
- how to read data from different HTML inout types 

4th lecture : 8th Video
- learn how and why to create an initialization function
it was an intereting video where i learnt how to expose a function as init function
that call the inner function (power of closures) then we can call it from outside

5th lecture : 
- learn how to choose function constructors that meet our application's needs
- how to set up a proper data structure for our budget controller 

6th lecture:
-how to avoid conflicts in our data structures
-how  and why to pass data from one module to another.

7th lecture :

- A technique for adding big chunks of HTML into the DOM
- How To replace parts of strings
- how to do DOM manipulation using the insertAdjacentHTML method *

2nd Part of the App :

Add  event handler 
Delete the item from our data structure
Delete the item from the UI 
Recalculate Budget 
update the UI 



// Event Bubbling :
 when an event(click a button for example) is fired or triggered in a childElement is also fired in all the parents elements(All the way up till
 the html tag which is the root)

 Event bubbling --> Target Element ---> event delegation 
 attach an event handler to a parent and wait for an event to bubble up 

 Basically Event Delegation is simply not attach the event handler to the taget element 
 but attach it to a parent element and catch the event there because it bubbles up .

 Use Case for Event Delegation :

 1- when we have an element with lots of child elemnts that we are interested in
 2- when we want an event handler attached to an element that is not yet in the DOM when our page is loaded

DOM Traversing is moving up in the DOM

3rd TO DO LIST :

calculate percentages 
update percentages in UI 
display the current month and year 
number formatting 
improve input field UX

/// fORMATTING NUMBERS 
2 numbers after the point ex :  1,500.00 === 1500